# Python CircleCI 2.1 configuration file
version: 2.1

commands:
    restore_data_cache:
        description: "Restore data cache."
        steps:
            - run:
                name: Get restore
                command: |
                    if [[ $(cat restore.txt) == "true" ]]; then
                        date +%U > week_num;
                    else
                        echo 'missing' > week_num;
                    fi
            - restore_cache:
                keys:
                    - v1-dataset_1_3-{{ checksum "week_num" }}
            - restore_cache:
                keys:
                    - v1-dataset_2-{{ checksum "week_num" }}

    save_data_cache:
        description: "Cache the downloaded data."
        steps:
            - run:
                name: Generate cache keys
                command: |
                    date +%U > week_num;
            - save_cache:
                key: v1-dataset_1_3-{{ checksum "week_num" }}
                paths:
                    - ~/toy_pkg_data/fake_dataset_1
                    - ~/toy_pkg_data/fake_dataset_3
            - save_cache:
                key: v1-dataset_2-{{ checksum "week_num" }}
                paths:
                    - ~/toy_pkg_data/fake_dataset_2


jobs:
    build_docs:
        docker:
            - image: circleci/python:3.8.5-buster

        steps:
            - restore_cache:
                keys:
                    - source-cache
            - checkout
            - run:
                name: Complete checkout
                command: |
                    if ! git remote -v | grep upstream; then
                        git remote add upstream git://github.com/NicolasGensollen/toy_pkg.git
                    fi
                    git fetch upstream
            - save_cache:
                key: source-cache
                paths:
                    - ".git"
            - run:
                name: Merge with upstream
                command: |
                    echo $(git log -6 --pretty=format:'/n%h - %s');
                    echo $(git log -1 --pretty=%B) | tee gitlog.txt
                    echo "gitlog.txt = $(cat gitlog.txt)"
                    echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
                    if [[ $(cat merge.txt) != "" ]]; then
                        echo "Merging $(cat merge.txt)";
                        echo $(git log $(git fetch upstream "refs/pull/$(cat merge.txt)/head")..upstream/main --pretty=format:'%h - %s');
                        git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
                    else
                        echo "Nuthin to do";
                    fi
                    echo $(git log -15 --pretty=format:'/n%h - %s');
            - run:
                name: read commit message
                command: |
                    msg=$(git log -1 --format=oneline);
                    echo $msg;
                    if [[ $msg == *"[force download]"* ]]; then
                        echo "All datasets will be downloaded as requested!";
                        touch restore.txt;
                        cat restore.txt;
                    else
                        echo "Data cache will be used if available!";
                        echo "true" | tee restore.txt;
                    fi
            # Load pip cache
            - restore_cache:
                keys:
                  - miniconda
            - run:
                name: setup conda
                command: |
                    if 
                      ls $HOME/miniconda3/bin | grep conda -q
                    then
                      echo "(Mini)Conda already present from the cache.";
                    else
                      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh;
                      chmod +x ~/miniconda.sh && ~/miniconda.sh -b;
                      echo 'export PATH="$HOME/miniconda3/bin:$PATH"'  >> $BASH_ENV;
                    fi
            - run:
                name: Install apt packages
                command: |
                    ./tools/circleci_dependencies_apt.sh
            - run:
                name: Setup conda path in env variables
                command: |
                    echo 'export PATH="$HOME/miniconda3/bin:$PATH"'  >> $BASH_ENV
            - run:
                name: Install packages in conda env
                command: |
                    if
                      conda env list | grep testenv
                    then
                      echo "Conda env testenv already exists courtesy of the cache.";
                    else
                      ./tools/circleci_dependencies.sh;
                    fi
            - run:
                name: echo restore
                command: |
                    cat restore.txt;
                    if [[ "true" == $(cat restore.txt) ]]; then
                        echo "should restore cache";
                    else
                        echo "should not restore cache";
                    fi

            - restore_data_cache

            - run:
                name: Get data
                command: |
                    ./tools/circleci_download.sh
            - run:
                name: Verify build type
                command: |
                    echo "PATTERN=$(cat pattern.txt)"
                    echo "BUILD=$(cat build.txt)"
            # Build docs
            - run:
                name: make html
                command: |
                    source activate testenv;
                    echo "Conda active env = $CONDA_DEFAULT_ENV";
                    echo "Which Python = $(which python)";
                    cd doc;
                    set -o pipefail;
                    PATTERN=$(cat ../pattern.txt) make $(cat ../build.txt) 2>&1 | tee log.txt;
            - store_artifacts:
                path: doc/build/test-results
                destination: test-results
            # Save the HTML
            - store_artifacts:
                path: doc/build/html/
                destination: dev
            - store_artifacts:
                path: doc/build/html_stable/
                destination: stable
            - store_artifacts:
                path: doc/log.txt
            - persist_to_workspace:
                root: doc/build
                paths:
                  - html
                  - html_stable
            - save_cache:
                key: miniconda
                paths:
                    - ../miniconda3
            - save_data_cache

workflows:
    version: 2

    build_doc:
        jobs:
            - build_docs
